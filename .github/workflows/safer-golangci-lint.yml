# Copyright © 2021 Montgomery Edwards⁴⁴⁸ (github.com/x448).
# This file is licensed under MIT License.
#
# Safer GitHub Actions Workflow for golangci-lint.
# https://github.com/x448/safer-golangci-lint 
#
# safer-golangci-lint.yml
#
# 100% of the script for downloading, installing, and running golangci-lint
# is embedded in this file.  The embedded SHA384 is used to verify the 
# downloaded golangci-lint tarball (golangci-lint-1.41.1-linux-amd64.tar.gz). 
#
# Why?
#   1. Avoid downloading and executing unverified wrapper scripts or actions each time a workflow runs.
#      See https://www.securityweek.com/codecov-bash-uploader-dev-tool-compromised-supply-chain-hack
#   2. Use openssl instead of sha256sum because it's easier to change hash algo to BLAKE2s, SHA3-256, etc.
#   3. Use SHA384 instead of SHA256 to avoid debates about length extension attacks and gzip file format.
#   4. Use embedded SHA384 instead of downloading CHECKSUM because CHECKSUM file isn't digitally signed.
#   5. Use binary instead of building from source because it's probably easier to detect backdoors in one binary 
#      than all the combined source code of dozens of linters and all their required 3rd-party packages.
#
# To use:
#   Step 1. Copy this file into [github_repo]/.github/workflows/
#   Step 2. There's no step 2 if you like the default settings.
#
# You can create and use a config file (.golangci.yml) as described in golangci-lint docs.
#
# To use a newer version of golangci-lint, change these values:
#   1. GOLINTERS_VERSION
#   2. GOLINTERS_TGZ_DGST
#
# Release v1.14.1 (June 19, 2021)
#   - Bump Go to 1.16.x and golangci-lint to 1.41.1.
#   - Increase default timeout to 5 minutes.
#   - Remove optional noisy run because "noisy" is too subjective.
#   - sha256(linux-amd64.tar.gz) is 23e1078ab00a750afcde7e7eb5aab8e908ef18bee5486eeaa2d52ee57d178580
#   - sha384(linux-amd64.tar.gz) is 8e966704696875f39d324a2f321ac1f63edab08668d8e09fa06dbc54ffe4c4bf4796c80d611d7b40ca42a4b33c208800

name: Lint

on:  
  pull_request:
    types: [opened, synchronize, closed]
  push:
    branches: [main, master]

env:
  GOLINTERS_VERSION: 1.41.1
  GOLINTERS_ARCH: linux-amd64
  GOLINTERS_TGZ_DGST: 8e966704696875f39d324a2f321ac1f63edab08668d8e09fa06dbc54ffe4c4bf4796c80d611d7b40ca42a4b33c208800
  GOLINTERS_TIMEOUT: 5m
  OPENSSL_DGST_CMD: openssl dgst -sha384 -r
  CURL_CMD: curl --proto =https --tlsv1.2 --location --silent --show-error --fail
  
jobs:
  main:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
        
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x
                      
      - name: Install golangci-lint
        run: |
          GOLINTERS_URL_PREFIX="https://github.com/golangci/golangci-lint/releases/download/v${GOLINTERS_VERSION}/"
          GOLINTERS_TGZ="golangci-lint-${GOLINTERS_VERSION}-${GOLINTERS_ARCH}.tar.gz"
          GOLINTERS_EXPECTED_DGST="${GOLINTERS_TGZ_DGST} *${GOLINTERS_TGZ}"
          DGST_CMD="${OPENSSL_DGST_CMD} ${GOLINTERS_TGZ}"

          cd $(mktemp -d /tmp/golinters.XXXXX)
          ${CURL_CMD} "${GOLINTERS_URL_PREFIX}${GOLINTERS_TGZ}" --output ${GOLINTERS_TGZ}

          GOLINTERS_GOT_DGST=$(${DGST_CMD})
          if [ "${GOLINTERS_GOT_DGST}" != "${GOLINTERS_EXPECTED_DGST}" ]
          then
            echo "Digest of tarball is not equal to expected digest."
            echo "Expected digest: " "${GOLINTERS_EXPECTED_DGST}"
            echo "Got digest:      " "${GOLINTERS_GOT_DGST}"
            exit 1
          fi

          tar --no-same-owner -xzf "${GOLINTERS_TGZ}" --strip-components 1
          install golangci-lint $(go env GOPATH)/bin
        shell: bash
          
      # Run required linters enabled in .golangci.yml (or default linters if yml doesn't exist)     
      - name: Run golangci-lint
        run: $(go env GOPATH)/bin/golangci-lint run --timeout="${GOLINTERS_TIMEOUT}"
        shell: bash
